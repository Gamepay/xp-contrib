/* This class is part of the XP framework
 *
 * $Id$ 
 */

package org.hudson_ci.template;

import util.collections.Stack;

import xml.Tree;
import xml.Node;
import xml.ElementNode;
import xml.TextNode;
import xml.parser.XMLParser;
import xml.parser.ParserCallback;
import xml.XMLFormatException;

import lang.reflect.Package;

import text.regex.Pattern;

import native core.strncmp;
import native standard.call_user_func;
import native standard.call_user_func_array;
import native standard.substr;
import native standard.strpos;
import native standard.str_replace;
import native standard.explode;
import native standard.basename;
import native standard.dirname;

/**
 * Read configuration from XML templates
 *
 */
package class XmlConfigTemplateReader implements TemplateReader {

  /**
   * Read configuration
   *
   * @param lang.Package templates The package containig the templates
   * @param [:string] variables The variables
   * @return xml.Tree
   */  
  public Tree readConfiguration(Package $templates, [:string] $variables) {
    $callback= new ParserCallback($templates, $variables) {
      const string TNS = 'http://projects.xp-forge.net/devel/hudson-api/templates';
      const string PATTERN = '\{(\$([a-z-.]+)|([a-z]+)\(([^\)]+)\))\}';

      protected Node $node;
      protected Package $templates;
      protected var $nodes= new Stack<Node>();
      protected [:string] $namespaces = [:];
      protected [:string] $variables = [:];
      
      public __construct(Package $templates, [:string]? $variables) {
        $this.templates= $templates;
        $this.variables= $variables;
      }
      
      [@xslmethod]
      protected string basename(string? $name) {
        return basename($name);
      }

      [@xslmethod]
      protected string dirname(string? $name) {
        return dirname($name);
      }

      protected string attributeOf(Node $node, string? $name) {
        $attr= $node.getAttribute($name);
        foreach ($match in new Pattern(self::PATTERN).match($attr).groups()) {
          if (isset($match[3])) {
            $args= [];
            foreach ($arg in explode(',', $match[4])) {
              if ('$' === $arg[0]) {
                $args[]= $this.variables[substr($arg, 1)];
              } else {
                $args[]= $arg;
              }
            }
            $var= call_user_func_array([$this, $match[3]], $args);
          } else {
            $var= $this.variables[$match[2]];
          }
          $attr= str_replace($match[0], $var, $attr);
        }
        return $attr;
      }
      
      public void onStartElement(var $parser, string? $name, [:string]? $attrs) {
        foreach ($attr, $value in $attrs) {
          if (0 === strncmp($attr, 'xmlns:', 6)) {
            $this.namespaces[substr($attr, 6)]= $value;
            unset($attrs[$attr]);
          }
        }

        $this.nodes.push($this.node);
        $this.node= new ElementNode($name, null, $attrs);
      }
      
      protected Node doTemplateDefine(Node $parent, Node $define) {
        $this.variables[$define.getAttribute('name')]= $this.node.getContent();
        return null;
      }

      protected Node doTemplateInject(Node $parent, Node $inject) {
        $parent.addChild(new TextNode($this.attributeOf($inject, 'select')));
        return null;
      }

      protected Node doTemplateInclude(Node $parent, Node $include) {
        $package= $this.node.hasAttribute('package') 
          ? Package::forName($include.getAttribute('package'))
          : $this.templates
        ;
        $included= new XMLParser()
          .withCallback(new self($package, $this.variables))
          .parse($package.getResource($this.attributeOf($include, 'href') ~ '.xml'), $package.toString())
        ;
        foreach ($child in $included.root.children) {
          $parent.addChild($child);
        }
        return null;
      }

      protected Node doTemplateRoot(Node $parent, Node $root) {
        // Ignore, this is the wrapper object
        return $root;
      }
      
      public void onEndElement(var $parser, string? $name) {
        $parent= $this.nodes.pop();
        
        // Check for TNS nodes
        if (false !== ($p= strpos($name, ':'))) {
          $prefix= substr($name, 0, $p);
          if (isset($this.namespaces[$prefix]) && self::TNS === $this.namespaces[$prefix]) {
            $this.node= call_user_func([$this, 'doTemplate' ~ substr($name, $p+ 1)], $parent, $this.node);
          }
        }

        $this.node && $parent.addChild($this.node);
        $this.node= $parent;
      }
      
      public void onCData(var $parser, string? $cdata) {
        $this.node.addChild(new TextNode($cdata));
      }
      
      public void onDefault(var $parser, string? $data) {
        $this.node.addChild(new TextNode($data));
      }
      
      public void onBegin(XMLParser? $instance) {
        $this.node= new Node(null);
       }
       
      public void onError(XMLParser? $instance, XMLFormatException? $exception) {
        // NOOP
      }
      
      public void onFinish(XMLParser? $instance) {
        return new Tree().withRoot($this.node.children[0]);
      }
    };
    
    return new XMLParser()
      .withCallback($callback)
      .parse($templates.getResource('config.template.xml'), $templates.toString())
    ;
  }
}
