/* This class is part of the XP framework
 *
 * $Id: ModifyJob.xp 12610 2011-01-07 14:12:46Z friebe $ 
 */

package org.hudson_ci.cmd;

import org.hudson_ci.api.HudsonClient;
import org.hudson_ci.api.HudsonJob;
import org.hudson_ci.api.scm.SCMInterface;
import org.hudson_ci.hudson.scm.HudsonSCM;
import org.hudson_ci.hudson.scm.SubversionSCM;
import org.hudson_ci.hudson.scm.SubversionSCMModuleLocation;
import org.hudson_ci.hudson.core.HudsonJobConfiguration;
import org.hudson_ci.hudson.core.ProjectJobConfiguration;
import org.hudson_ci.template.ConfigTemplateReaderFactory;

import peer.URL;

import util.Properties;
import util.collections.Stack;

import xml.Tree;
import xml.XMLFormatException;

import lang.reflect.Package;

import text.regex.Pattern;

import native core.strncmp;
import native standard.sscanf;
import native standard.call_user_func;
import native standard.call_user_func_array;
import native standard.substr;
import native standard.strpos;
import native standard.str_replace;
import native standard.explode;
import native standard.basename;
import native standard.dirname;

/**
 * Modifies a hudson job
 *
 */
package abstract class ModifyJob extends util.cmd.Command {
  protected HudsonClient $client;
  protected SCMInterface $scm;
  protected Properties $config;
  protected string $name;
  protected bool $execute = false;
  protected [:string] $parameters = [];

  /**
   * Sets hudson base URL
   *
   */
  [@arg(position = 0)]
  public void setDsn(string $dsn) {
    $this.client= new HudsonClient($dsn);
  }

  /**
   * Sets SCM repository url
   *
   */
  [@arg(position = 1)]
  public void setSCM(string $url) {
    $this.scm= SCMInterface::forName($url);
  }

  /**
   * Sets name
   *
   */
  [@arg(position = 2)]
  public void setName(string $name) {
    $this.name= $name;
  }

  /**
   * Enable verbosity, will dump the xml
   *
   */
  [@arg(name= 'verbose', short= 'v')]
  public void setVerbose(var $v= false) {
    $this.verbose= ($v !== false);
  }

  /**
   * Sets configuration. If omitted, a hudson.ini will be fetched from the
   * SCM location.
   *
   * @param   name name of a config file. 
   */
  [@arg]
  public void setConfig(string $name = null) {
    if (null !== $name) {
      $this.config= new Properties($name);
    } else {
      $this.config= Properties::fromString($this.scm.getContents('hudson.ini'));
    }
  }

  /**
   * Adds variable
   *
   * @param   string keyvalue
   */
  [@arg(name= 'parameter', short= 'p')]
  public void addParameter(string $name= null) {
    if (null === $name) return;
    if (2 !== sscanf($name, '%[^=]=%s', $key, $value)) {
      throw new IllegalArgumentException('Parameter format is key=value');
    }

    $this.parameters[$key]= $value;
  }

  /**
   * Sets whether to actually execute
   *
   */
  [@arg]
  public void setExecute() {
    $this.execute= true;
  }
  
  /**
   * Generate XML job configuration
   *
   */
  protected Tree jobConfigurationXml() {
    $templates= Package::forName($this.config.readString('project', 'type'));
    $this.parameters['scm.type']= $this.scm.getType();
    $this.parameters['scm.url']= $this.scm.getURL();
    
    try {
      return ConfigTemplateReaderFactory::forName($this.config.readString('project', 'template', 'xml'))
        .newInstance()
        .readConfiguration($templates, $this.parameters)
      ;
    } catch (XMLFormatException $e) {
      throw new IllegalArgumentException('Erroneous ' ~ $templates.toString() ~ ': ' ~ $e.compoundMessage());
    } catch (Throwable $e) {
      throw new IllegalArgumentException('Erroneous ' ~ $templates.toString() ~ ': ' ~ $e.getMessage());
    }
  }
  
  /**
   * Gets job
   *
   */
  protected abstract HudsonJob job();

  /**
   * Update job
   *
   */
  protected abstract void save(HudsonJob $job);
  
  /**
   * Entry point method
   *
   */
  public void run() {
    with ($job= $this.job().withConfigurationXml($this.jobConfigurationXml())) {
      $this.out.writeLine('Job: ', $job);
      if ($this.verbose) {
        $this.out.writeLine('Configuration: ', $job.getConfigurationXml().getSource(INDENT_DEFAULT));
      }

      if ($this.execute) {
      	$this.save($job);
      } else {
        $this.out.writeLine('*** No action performed, no --execute given');
      }
    }
  }
}
